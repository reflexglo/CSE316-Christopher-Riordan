[{"C:\\hw2\\src\\index.js":"1","C:\\hw2\\src\\App.js":"2","C:\\hw2\\src\\reportWebVitals.js":"3","C:\\hw2\\src\\components\\Navbar.js":"4","C:\\hw2\\src\\components\\Workspace.js":"5","C:\\hw2\\src\\components\\LeftSidebar.js":"6","C:\\hw2\\src\\common\\jsTPS.js":"7","C:\\hw2\\src\\components\\ToDoItem.js":"8","C:\\hw2\\src\\components\\ListLink.js":"9","C:\\hw2\\src\\AddNewItem_Transaction.js":"10","C:\\hw2\\src\\MoveUp_Transaction.js":"11","C:\\hw2\\src\\MoveDown_Transaction.js":"12","C:\\hw2\\src\\CloseItem_Transaction.js":"13","C:\\hw2\\src\\components\\TaskForm.js":"14","C:\\hw2\\src\\ChangeTask_Transaction.js":"15","C:\\hw2\\src\\ChangeDate_Transaction.js":"16","C:\\hw2\\src\\components\\DateForm.js":"17","C:\\hw2\\src\\ChangeStatus_Transaction.js":"18","C:\\hw2\\src\\components\\StatusForm.js":"19","C:\\hw2\\src\\components\\ListTitle.js":"20"},{"size":557,"mtime":1615306827219,"results":"21","hashOfConfig":"22"},{"size":9968,"mtime":1615509043760,"results":"23","hashOfConfig":"22"},{"size":375,"mtime":1615306827219,"results":"24","hashOfConfig":"22"},{"size":431,"mtime":1615306827216,"results":"25","hashOfConfig":"22"},{"size":5513,"mtime":1615510707420,"results":"26","hashOfConfig":"22"},{"size":1687,"mtime":1615508918026,"results":"27","hashOfConfig":"22"},{"size":6712,"mtime":1615306827215,"results":"28","hashOfConfig":"22"},{"size":5075,"mtime":1615477508016,"results":"29","hashOfConfig":"22"},{"size":1432,"mtime":1615509153941,"results":"30","hashOfConfig":"22"},{"size":824,"mtime":1615409880965,"results":"31","hashOfConfig":"22"},{"size":568,"mtime":1615411563316,"results":"32","hashOfConfig":"22"},{"size":568,"mtime":1615411794768,"results":"33","hashOfConfig":"22"},{"size":825,"mtime":1615412362341,"results":"34","hashOfConfig":"22"},{"size":625,"mtime":1615437041755,"results":"35","hashOfConfig":"22"},{"size":1444,"mtime":1615436986101,"results":"36","hashOfConfig":"22"},{"size":1432,"mtime":1615475309970,"results":"37","hashOfConfig":"22"},{"size":665,"mtime":1615480598382,"results":"38","hashOfConfig":"22"},{"size":1442,"mtime":1615476529599,"results":"39","hashOfConfig":"22"},{"size":1195,"mtime":1615476756130,"results":"40","hashOfConfig":"22"},{"size":587,"mtime":1615509218790,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"ym0iot",{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"61","usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"70","usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"73","usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"76","usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"79","usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"85","usedDeprecatedRules":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"88","usedDeprecatedRules":"44"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"44"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"94","usedDeprecatedRules":"44"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"44"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},"C:\\hw2\\src\\index.js",[],["101","102"],"C:\\hw2\\src\\App.js",["103","104","105","106"],"// IMPORT ALL THE THINGS NEEDED FROM OTHER JAVASCRIPT SOURCE FILES\r\nimport React, { Component } from 'react';\r\nimport testData from './test/testData.json'\r\nimport jsTPS from './common/jsTPS'\r\nimport AddNewItem_Transaction from './AddNewItem_Transaction'\r\nimport MoveUp_Transaction from './MoveUp_Transaction'\r\nimport MoveDown_Transaction from './MoveDown_Transaction'\r\nimport CloseItem_Transaction from './CloseItem_Transaction'\r\nimport ChangeTask_Transaction from './ChangeTask_Transaction'\r\nimport ChangeDate_Transaction from './ChangeDate_Transaction'\r\nimport ChangeStatus_Transaction from './ChangeStatus_Transaction'\r\nimport { confirmAlert } from 'react-confirm-alert';\r\nimport 'react-confirm-alert/src/react-confirm-alert.css';\r\n\r\n// THESE ARE OUR REACT COMPONENTS\r\nimport Navbar from './components/Navbar'\r\nimport LeftSidebar from './components/LeftSidebar'\r\nimport Workspace from './components/Workspace'\r\n{/*import ItemsListHeaderComponent from './components/ItemsListHeaderComponent'\r\nimport ItemsListComponent from './components/ItemsListComponent'\r\nimport ListsComponent from './components/ListsComponent'\r\n*/}\r\nclass App extends Component {\r\n  constructor(props) {\r\n    // ALWAYS DO THIS FIRST\r\n    super(props);\r\n\r\n    // DISPLAY WHERE WE ARE\r\n    console.log(\"App constructor\");\r\n\r\n    // MAKE OUR TRANSACTION PROCESSING SYSTEM\r\n    this.tps = new jsTPS();\r\n\r\n    // CHECK TO SEE IF THERE IS DATA IN LOCAL STORAGE FOR THIS APP\r\n    let recentLists = localStorage.getItem(\"recentLists\");\r\n    console.log(\"recentLists: \" + recentLists);\r\n    if (!recentLists) {\r\n      recentLists = JSON.stringify(testData.toDoLists);\r\n      localStorage.setItem(\"toDoLists\", recentLists);\r\n    }\r\n    recentLists = JSON.parse(recentLists);\r\n\r\n    // FIND OUT WHAT THE HIGHEST ID NUMBERS ARE FOR LISTS\r\n    let highListId = -1;\r\n    let highListItemId = -1;\r\n    for (let i = 0; i < recentLists.length; i++) {\r\n      let toDoList = recentLists[i];\r\n      if (toDoList.id > highListId) {\r\n        highListId = toDoList.id;\r\n      }\r\n      for (let j = 0; j < toDoList.items.length; j++) {\r\n        let toDoListItem = toDoList.items[j];\r\n        if (toDoListItem.id > highListItemId)\r\n        highListItemId = toDoListItem.id;\r\n      }\r\n    };\r\n\r\n    // SETUP OUR APP STATE\r\n    this.state = {\r\n      toDoLists: recentLists,\r\n      currentList: {items: []},\r\n      nextListId: highListId+1,\r\n      nextListItemId: highListItemId+1,\r\n      useVerboseFeedback: true\r\n    }\r\n  }\r\n\r\n  // WILL LOAD THE SELECTED LIST\r\n  loadToDoList = (toDoList) => {\r\n    console.log(\"loading \" + toDoList);\r\n\r\n    // MAKE SURE toDoList IS AT THE TOP OF THE STACK BY REMOVING THEN PREPENDING\r\n    const nextLists = this.state.toDoLists.filter(testList =>\r\n      testList.id !== toDoList.id\r\n    );\r\n    nextLists.unshift(toDoList);\r\n\r\n    this.setState({\r\n      toDoLists: nextLists,\r\n      currentList: toDoList\r\n    });\r\n  }\r\n\r\n\r\n  changeListTitle = (title) => {\r\n    let thisList = this.state.currentList;\r\n    thisList.name = title;\r\n    this.setState({\r\n      toDoLists: this.state.toDoLists,\r\n      currentList: thisList,\r\n      nextListItemId: this.state.nextListItemId+1\r\n    },this.afterToDoListsChangeComplete);\r\n  }\r\n\r\n  addNewList = () => {\r\n    let newToDoListInList = [this.makeNewToDoList()];\r\n    let newToDoListsList = [...newToDoListInList, ...this.state.toDoLists];\r\n    let newToDoList = newToDoListInList[0];\r\n    newToDoList.id = this.state.nextListId;\r\n\r\n    // AND SET THE STATE, WHICH SHOULD FORCE A render\r\n    this.setState({\r\n      toDoLists: newToDoListsList,\r\n      currentList: newToDoList,\r\n      nextListId: this.state.nextListId+1\r\n    }, this.afterToDoListsChangeComplete);\r\n  }\r\n\r\n  addNewItemTransaction = () => {\r\n    let transaction = new AddNewItem_Transaction(this);\r\n    this.tps.addTransaction(transaction);\r\n  }\r\n\r\n  addNewItem = () => {\r\n    let thisList = this.state.currentList;\r\n    let newItem = this.makeNewToDoListItem();\r\n    if(thisList!=null){\r\n    thisList.items[thisList.items.length] = newItem;\r\n    this.setState({\r\n      toDoLists: this.state.toDoLists,\r\n      currentList: thisList,\r\n      nextListItemId: this.state.nextListItemId+1\r\n    },this.afterToDoListsChangeComplete);\r\n  }\r\n  return newItem;\r\n  }\r\n\r\n  deleteList = () => {\r\n    let thisList = this.state.currentList;\r\n    if(thisList!=null){\r\n    let allLists = this.state.toDoLists;\r\n    let ind = allLists.indexOf(thisList);\r\n    allLists.splice(ind,1);\r\n    if(ind!=-1){\r\n    this.setState({\r\n      toDoLists: this.state.toDoLists,\r\n      currentList: {items:[]},\r\n      toDoLists: allLists,\r\n      nextListId: this.state.nextListId\r\n    },this.afterToDoListsChangeComplete);\r\n  }\r\n  }\r\n  }\r\n\r\n  closeList = () => {\r\n    let thisList = this.state.currentList;\r\n    this.setState({\r\n      toDoLists: this.state.toDoLists,\r\n      currentList: {items:[]},\r\n      nextListId: this.state.nextListId\r\n    },this.afterToDoListsChangeComplete);\r\n  }\r\n\r\n  moveUpTransaction = (item) => {\r\n    let transaction = new MoveUp_Transaction(this,item);\r\n    this.tps.addTransaction(transaction);\r\n  }\r\n\r\n  moveUp = (item) => {\r\n    let thisList = this.state.currentList;\r\n    let ind = thisList.items.indexOf(item);\r\n    if(ind-1>=0){\r\n    let temp = thisList.items[ind-1];\r\n    thisList.items[ind-1] = item;\r\n    thisList.items[ind] = temp;\r\n    this.setState({\r\n      toDoLists: this.state.toDoLists,\r\n      currentList: thisList,\r\n      nextListId: this.state.nextListId\r\n    },this.afterToDoListsChangeComplete);\r\n  }\r\n  }\r\n\r\n  moveDownTransaction = (item) => {\r\n    let transaction = new MoveDown_Transaction(this,item);\r\n    this.tps.addTransaction(transaction);\r\n  }\r\n\r\n  moveDown = (item) => {\r\n    let thisList = this.state.currentList;\r\n    let ind = thisList.items.indexOf(item);\r\n    if(ind+1<thisList.items.length){\r\n    let temp = thisList.items[ind+1];\r\n    thisList.items[ind+1] = item;\r\n    thisList.items[ind] = temp;\r\n    this.setState({\r\n      toDoLists: this.state.toDoLists,\r\n      currentList: thisList,\r\n      nextListId: this.state.nextListId\r\n    },this.afterToDoListsChangeComplete);\r\n  }\r\n  }\r\n\r\n  closeItemTransaction = (item) => {\r\n    let transaction = new CloseItem_Transaction(this,item);\r\n    this.tps.addTransaction(transaction);\r\n  }\r\n\r\n  closeItem = (item) => {\r\n    let thisList = this.state.currentList;\r\n    let ind = thisList.items.indexOf(item);\r\n    thisList.items.splice(ind,1);\r\n    this.setState({\r\n      toDoLists: this.state.toDoLists,\r\n      currentList: thisList,\r\n      nextListId: this.state.nextListId\r\n    },this.afterToDoListsChangeComplete);\r\n    return ind;\r\n  }\r\n\r\n  changeTaskTransaction = (item,newTask,oldTask) => {\r\n    let transaction = new ChangeTask_Transaction(this,item,newTask,oldTask);\r\n    this.tps.addTransaction(transaction);\r\n  }\r\n\r\n  changeDateTransaction = (item,newDate,oldDate) => {\r\n    let transaction = new ChangeDate_Transaction(this,item,newDate,oldDate);\r\n    this.tps.addTransaction(transaction);\r\n  }\r\n\r\n  changeStatusTransaction = (item,newStatus,oldStatus) => {\r\n    let transaction = new ChangeStatus_Transaction(this,item,newStatus,oldStatus);\r\n    this.tps.addTransaction(transaction);\r\n  }\r\n\r\n  makeNewToDoList = () => {\r\n    let newToDoList = {\r\n      id: this.highListId,\r\n      name: 'Untitled',\r\n      items: []\r\n    };\r\n    return newToDoList;\r\n  }\r\n\r\n  makeNewToDoListItem = () =>  {\r\n    let newToDoListItem = {\r\n      description: \"No Description\",\r\n      dueDate: \"none\",\r\n      status: \"incomplete\"\r\n    };\r\n    return newToDoListItem;\r\n  }\r\n\r\n  // THIS IS A CALLBACK FUNCTION FOR AFTER AN EDIT TO A LIST\r\n  afterToDoListsChangeComplete = () => {\r\n    console.log(\"App updated currentToDoList: \" + this.state.currentList);\r\n\r\n    // WILL THIS WORK? @todo\r\n    let toDoListsString = JSON.stringify(this.state.toDoLists);\r\n    localStorage.setItem(\"recent_work\", toDoListsString);\r\n  }\r\n\r\n  undo = () => {\r\n    if (this.tps.hasTransactionToUndo()) {\r\n      this.tps.undoTransaction();\r\n    }\r\n  }\r\n  redo = () => {\r\n    if (this.tps.hasTransactionToRedo()) {\r\n      this.tps.doTransaction();\r\n    }\r\n  }\r\n\r\n  undoStatus = () => {\r\n    if (this.tps.hasTransactionToUndo()) {\r\n      return \"enabled\";\r\n    }\r\n    else{\r\n      return \"disabled\";\r\n    }\r\n  }\r\n  redoStatus = () => {\r\n    if (this.tps.hasTransactionToRedo()) {\r\n      return \"enabled\";\r\n    }\r\n    else{\r\n      return \"disabled\";\r\n    }\r\n  }\r\n\r\n  nothing = () => {\r\n\r\n  }\r\n\r\n  confirmDelete = () => {\r\n    confirmAlert({\r\n      title: 'Confirm delete',\r\n      message: 'Are you sure want to delete this list?',\r\n      buttons: [\r\n        {\r\n          label: 'Yes',\r\n          onClick: this.deleteList\r\n        },\r\n        {\r\n          label: 'Cancel',\r\n          onClick: this.nothing\r\n        }\r\n      ]\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let items = this.state.currentList.items;\r\n    return (\r\n      <div id=\"root\">\r\n        <Navbar />\r\n        <LeftSidebar \r\n          toDoLists={this.state.toDoLists}\r\n          loadToDoListCallback={this.loadToDoList}\r\n          addNewListCallback={this.addNewList}\r\n          selectedList={this.state.currentList}\r\n          changeListTitleCallBack={this.changeListTitle}\r\n        />\r\n        <Workspace \r\n        toDoListItems={items}\r\n        currentToDoList={this.state.currentList}\r\n        undoStatus={this.undoStatus}\r\n        redoStatus={this.redoStatus}\r\n        addNewItemCallBack={this.addNewItemTransaction}\r\n        deleteListCallBack={this.confirmDelete}\r\n        closeListCallBack={this.closeList}\r\n        moveUpItemCallBack={this.moveUpTransaction}\r\n        moveDownItemCallBack={this.moveDownTransaction}\r\n        closeItemCallBack={this.closeItemTransaction}\r\n        changeTaskCallBack={this.changeTaskTransaction}\r\n        changeDateCallBack={this.changeDateTransaction}\r\n        changeStatusCallBack={this.changeStatusTransaction}\r\n        undoCallBack={this.undo}\r\n        redoCallBack={this.redo}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","C:\\hw2\\src\\reportWebVitals.js",[],"C:\\hw2\\src\\components\\Navbar.js",["107"],"// IMPORT ALL THE THINGS NEEDED FROM OTHER JAVASCRIPT SOURCE FILES\r\nimport React, { Component } from 'react'\r\n\r\nclass Navbar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"navbar\">\r\n                <div id=\"title-div\">\r\n                    Todo Tracker\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navbar;","C:\\hw2\\src\\components\\Workspace.js",["108","109"],"// IMPORT ALL THE THINGS NEEDED FROM OTHER JAVASCRIPT SOURCE FILES\r\nimport React, { Component } from 'react'\r\nimport ToDoItem from './ToDoItem'\r\nimport Undo from '@material-ui/icons/Undo';\r\nimport Redo from '@material-ui/icons/Redo';\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport Delete from '@material-ui/icons/Delete';\r\nimport Close from '@material-ui/icons/Close';\r\nimport Hotkeys from 'react-hot-keys';\r\n\r\nclass Workspace extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    undoShortCut = () => {\r\n        this.props.undoCallBack();\r\n        this.forceUpdate();\r\n    }\r\n    redoShortCut = () => {\r\n        this.props.redoCallBack();\r\n        this.forceUpdate();\r\n    }\r\n    render() {\r\n        if(this.props.currentToDoList.id!=undefined){\r\n            return (\r\n                <div id=\"workspace\">\r\n                    <div id=\"todo-list-header-card\" className=\"list-item-card\">\r\n                        <div id=\"task-col-header\" className=\"item-col todo-button\">Task</div>\r\n                        <div id=\"date-col-header\" className=\"item-col todo-button\">Due Date</div>\r\n                        <div id=\"status-col-header\" className=\"item-col todo-button\">Status</div>\r\n                        <div className=\"item-col\" display=\"flex\" flexDirection=\"row\" flexWrap=\"nowrap\">\r\n                            <Hotkeys \r\n                                keyName=\"ctrl+z\" \r\n                                onKeyDown={this.undoShortCut}\r\n                            >\r\n                            </Hotkeys>\r\n                            <Hotkeys \r\n                                keyName=\"ctrl+y\" \r\n                                onKeyDown={this.redoShortCut}\r\n                            >\r\n                            </Hotkeys>\r\n                            <Undo value={this.props.undoStatus()} id=\"undo-button\" className=\"material-icons\" onClick={this.props.undoCallBack}/>\r\n                            <Redo value={this.props.redoStatus()} id=\"redo-button\" className=\"material-icons\" onClick={this.props.redoCallBack}/>\r\n                            <AddBox id=\"add-item-button\" className=\"list-item-control material-icons todo-button\" onClick={this.props.addNewItemCallBack}/>\r\n                            <Delete id=\"delete-list-button\" className=\"list-item-control material-icons todo-button\" onClick={this.props.deleteListCallBack}/>\r\n                            <Close id=\"close-list-button\" className=\"list-item-control material-icons todo-button\" onClick={this.props.closeListCallBack}/>\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"todo-list-items-div\">\r\n                    {\r\n                        this.props.toDoListItems.map((toDoListItem) => (\r\n                        <ToDoItem\r\n                            index={this.props.toDoListItems.indexOf(toDoListItem)}\r\n                            listLength={this.props.toDoListItems.length}\r\n                            key={toDoListItem.id}\r\n                            toDoListItem={toDoListItem}     // PASS THE ITEM TO THE CHILDREN\r\n                            moveUpItemCallBack={this.props.moveUpItemCallBack}\r\n                            moveDownItemCallBack={this.props.moveDownItemCallBack}\r\n                            closeItemCallBack={this.props.closeItemCallBack}\r\n                            changeTaskCallBack={this.props.changeTaskCallBack}\r\n                            changeDateCallBack={this.props.changeDateCallBack}\r\n                            changeStatusCallBack={this.props.changeStatusCallBack}\r\n                        />))\r\n                    }\r\n                </div>\r\n                <br />\r\n            </div>\r\n        );\r\n        }\r\n        else{\r\n            return (\r\n                <div id=\"workspace\">\r\n                    <div id=\"todo-list-header-card\" className=\"list-item-card\">\r\n                        <div id=\"task-col-header\" className=\"item-col todo-button\">Task</div>\r\n                        <div id=\"date-col-header\" className=\"item-col todo-button\">Due Date</div>\r\n                        <div id=\"status-col-header\" className=\"item-col todo-button\">Status</div>\r\n                        <div className=\"item-col\" display=\"flex\" flexDirection=\"row\" flexWrap=\"nowrap\">\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"todo-list-items-div\">\r\n                    {\r\n                        this.props.toDoListItems.map((toDoListItem) => (\r\n                        <ToDoItem\r\n                            index={this.props.toDoListItems.indexOf(toDoListItem)}\r\n                            listLength={this.props.toDoListItems.length}\r\n                            key={toDoListItem.id}\r\n                            toDoListItem={toDoListItem}     // PASS THE ITEM TO THE CHILDREN\r\n                            moveUpItemCallBack={this.props.moveUpItemCallBack}\r\n                            moveDownItemCallBack={this.props.moveDownItemCallBack}\r\n                            closeItemCallBack={this.props.closeItemCallBack}\r\n                            changeTaskCallBack={this.props.changeTaskCallBack}\r\n                            changeDateCallBack={this.props.changeDateCallBack}\r\n                            changeStatusCallBack={this.props.changeStatusCallBack}\r\n                        />))\r\n                    }\r\n                </div>\r\n                <br />\r\n            </div>\r\n        );\r\n        }\r\n        \r\n                \r\n    }\r\n}\r\n\r\nexport default Workspace;","C:\\hw2\\src\\components\\LeftSidebar.js",["110"],"// IMPORT ALL THE THINGS NEEDED FROM OTHER JAVASCRIPT SOURCE FILES\r\nimport React, { Component } from 'react';\r\nimport ListLink from './ListLink'\r\nimport AddBox from '@material-ui/icons/AddBox';\r\n\r\nclass LeftSidebar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    handleAddNewList = () => {\r\n        this.props.addNewListCallback();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"left-sidebar\">\r\n                <div id=\"left-sidebar-header\" class=\"section-header\">\r\n                    <span class=\"left-sidebar-header-text\">Todolists</span>\r\n                    <span class=\"left-sidebar-controls\" id=\"add-undo-redo-box\">\r\n                        <AddBox \r\n                            id=\"add-list-button\"\r\n                            className=\"material-icons todo_button\"\r\n                            onClick={this.handleAddNewList} />\r\n                    </span>\r\n                </div>\r\n                <div id=\"todo-lists-list\">\r\n                {\r\n                    this.props.toDoLists.map((toDoList) => (\r\n                        <ListLink\r\n                            key={toDoList.id}\r\n                            selectedList={this.props.selectedList}\r\n                            changeListTitleCallBack={this.props.changeListTitleCallBack}\r\n                            toDoList={toDoList}                                // PASS THE LIST TO THE CHILDREN\r\n                            loadToDoListCallback={this.props.loadToDoListCallback} />  // PASS THE CALLBACK TO THE CHILDREN\r\n                    ))\r\n                }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LeftSidebar;","C:\\hw2\\src\\common\\jsTPS.js",["111","112"],"'use strict'\r\n\r\n/**\r\n * jsTPS_Transaction\r\n * \r\n * This provides the basic structure for a transaction class. Note to use\r\n * jsTPS one should create objects that define these two methods, doTransaction\r\n * and undoTransaction, which will update the application state accordingly.\r\n * \r\n * @author THE McKilla Gorilla (accept no imposters)\r\n * @version 1.0\r\n */\r\nexport class jsTPS_Transaction {\r\n    /**\r\n     * This method is called by jTPS when a transaction is executed.\r\n     */\r\n    doTransaction() {\r\n        console.log(\"doTransaction - MISSING IMPLEMENTATION\");\r\n    }\r\n    \r\n    /**\r\n     * This method is called by jTPS when a transaction is undone.\r\n     */\r\n    undoTransaction() {\r\n        console.log(\"undoTransaction - MISSING IMPLEMENTATION\");\r\n    }\r\n}\r\n\r\n/**\r\n * jsTPS\r\n * \r\n * This class serves as the Transaction Processing System. Note that it manages\r\n * a stack of jsTPS_Transaction objects, each of which know how to do or undo\r\n * state changes for the given application. Note that this TPS is not platform\r\n * specific as it is programmed in raw JavaScript.\r\n */\r\nexport default class jsTPS {\r\n    constructor() {\r\n        // THE TRANSACTION STACK\r\n        this.transactions = [];\r\n\r\n        // THE TOTAL NUMBER OF TRANSACTIONS ON THE STACK,\r\n        // INCLUDING THOSE THAT MAY HAVE ALREADY BEEN UNDONE\r\n        this.numTransactions = 0;\r\n\r\n        // THE INDEX OF THE MOST RECENT TRANSACTION, NOTE THAT\r\n        // THIS MAY BE IN THE MIDDLE OF THE TRANSACTION STACK\r\n        // IF SOME TRANSACTIONS ON THE STACK HAVE BEEN UNDONE\r\n        // AND STILL COULD BE REDONE.\r\n        this.mostRecentTransaction = -1;\r\n\r\n        // THESE STATE VARIABLES ARE TURNED ON AND OFF WHILE\r\n        // TRANSACTIONS ARE DOING THEIR WORK SO AS TO HELP\r\n        // MANAGE CONCURRENT UPDATES\r\n        this.performingDo = false;\r\n        this.performingUndo = false;\r\n    }\r\n\r\n    /**\r\n     * isPerformingDo\r\n     * \r\n     * Accessor method for getting a boolean representing whether or not\r\n     * a transaction is currently in the midst of a do/redo operation.\r\n     */\r\n    isPerformingDo() {\r\n        return this.performingDo;\r\n    }\r\n\r\n    /**\r\n     * isPerformingUndo\r\n     * \r\n     * Accessor method for getting a boolean representing whether or not\r\n     * a transaction is currently in the midst of an undo operation.\r\n     */\r\n    isPerformingUndo() {\r\n        return this.performingUndo;\r\n    }\r\n\r\n    /**\r\n     * getSize\r\n     * \r\n     * Accessor method for getting the number of transactions on the stack.\r\n     */\r\n    getSize() {\r\n        return this.transactions.length;\r\n    }\r\n\r\n    /**\r\n     * getRedoSize\r\n     * \r\n     * Method for getting the total number of transactions on the stack\r\n     * that can possibly be redone.\r\n     */\r\n    getRedoSize() {\r\n        return this.getSize() - this.mostRecentTransaction - 1;\r\n    }\r\n\r\n    /**\r\n     * getUndoSize\r\n     * \r\n     * Method for getting the total number of transactions on the stack\r\n     * that can possible be undone.\r\n     */\r\n    getUndoSize() {\r\n        return this.mostRecentTransaction + 1;\r\n    }\r\n\r\n    /**\r\n     * hasTransactionToRedo\r\n     * \r\n     * Method for getting a boolean representing whether or not\r\n     * there are transactions on the stack that can be redone.\r\n     */\r\n    hasTransactionToRedo() {\r\n        return (this.mostRecentTransaction+1) < this.numTransactions;\r\n    }\r\n\r\n    /**\r\n     * hasTransactionToUndo\r\n     * \r\n     * Method for getting a boolean representing whehter or not\r\n     * there are transactions on the stack that can be undone.\r\n     */\r\n    hasTransactionToUndo() {\r\n        return this.mostRecentTransaction >= 0;\r\n    }\r\n\r\n    /**\r\n     * addTransaction\r\n     * \r\n     * Method for adding a transaction to the TPS stack, note it\r\n     * also then does the transaction.\r\n     * \r\n     * @param {jsTPS_Transaction} transaction Transaction to add to the stack and do.\r\n     */\r\n    addTransaction(transaction) {\r\n        // ARE WE BRANCHING?\r\n        if ((this.mostRecentTransaction < 0) \r\n            || (this.mostRecentTransaction < (this.transactions.length - 1))) {\r\n                for (let i = this.transactions.length - 1; i > this.mostRecentTransaction; i--) {\r\n                    this.transactions.splice(i, 1);\r\n                }\r\n                this.numTransactions = this.mostRecentTransaction + 2;\r\n        }\r\n        else {\r\n            this.numTransactions++;\r\n        }\r\n\r\n        // ADD THE TRANSACTION\r\n        this.transactions[this.mostRecentTransaction+1] = transaction;\r\n\r\n        // AND EXECUTE IT\r\n        this.doTransaction();\r\n    }\r\n\r\n    /**\r\n     * doTransaction\r\n     * \r\n     * Does the current transaction on the stack and advances the transaction\r\n     * counter. Note this function may be invoked as a result of either adding\r\n     * a transaction (which also does it), or redoing a transaction.\r\n     */\r\n    doTransaction() {\r\n        if (this.hasTransactionToRedo()) {\r\n            this.performingDo = true;\r\n            let transaction = this.transactions[this.mostRecentTransaction+1];\r\n            transaction.doTransaction();\r\n            this.mostRecentTransaction++;\r\n            this.performingDo = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function gets the most recently executed transaction on the \r\n     * TPS stack and undoes it, moving the TPS counter accordingly.\r\n     */\r\n    undoTransaction() {\r\n        if (this.hasTransactionToUndo()) {\r\n            this.performingUndo = true;\r\n            let transaction = this.transactions[this.mostRecentTransaction];\r\n            transaction.undoTransaction();\r\n            this.mostRecentTransaction--;\r\n            this.performingUndo = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * clearAllTransactions\r\n     * \r\n     * Removes all the transactions from the TPS, leaving it with none.\r\n     */\r\n    clearAllTransactions() {\r\n        // REMOVE ALL THE TRANSACTIONS\r\n        this.transactions = new Array();\r\n        \r\n        // MAKE SURE TO RESET THE LOCATION OF THE\r\n        // TOP OF THE TPS STACK TOO\r\n        this.mostRecentTransaction = -1;      \r\n        this.numTransactions = 0; \r\n    }\r\n\r\n    /**\r\n     * toString\r\n     * \r\n     * Builds and returns a textual represention of the full TPS and its stack.\r\n     */\r\n    toString() {        \r\n        let text = \"--Number of Transactions: \" + this.numTransactions + \"\\n\";\r\n        text += \"--Current Index on Stack: \" + this.mostRecentTransaction + \"\\n\";\r\n        text += \"--Current Transaction Stack:\\n\";\r\n        for (let i = 0; i <= this.mostRecentTransaction; i++) {\r\n            let jT = this.transactions[i];\r\n            text += \"----\" + jT.toString() + \"\\n\";\r\n        }\r\n        return text;        \r\n    }\r\n}","C:\\hw2\\src\\components\\ToDoItem.js",["113","114","115"],"// IMPORT ALL THE THINGS NEEDED FROM OTHER JAVASCRIPT SOURCE FILES\r\nimport React, { Component } from 'react'\r\nimport KeyboardArrowUp from '@material-ui/icons/KeyboardArrowUp';\r\nimport KeyboardArrowDown from '@material-ui/icons/KeyboardArrowDown';\r\nimport Close from '@material-ui/icons/Close';\r\nimport TaskForm from './TaskForm'\r\nimport DateForm from './DateForm'\r\nimport StatusForm from './StatusForm'\r\n\r\nclass ToDoItem extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        // DISPLAY WHERE WE ARE\r\n        console.log(\"\\t\\t\\tToDoItem \" + this.props.toDoListItem.id + \" constructor\");\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        // DISPLAY WHERE WE ARE\r\n        console.log(\"\\t\\t\\tToDoItem \" + this.props.toDoListItem.id + \" did mount\");\r\n    }\r\n    moveThisItemUp = () => {\r\n        this.props.moveUpItemCallBack(this.props.toDoListItem);\r\n    }\r\n    moveThisItemDown = () => {\r\n        this.props.moveDownItemCallBack(this.props.toDoListItem);\r\n    }\r\n    closeItem = () => {\r\n        this.props.closeItemCallBack(this.props.toDoListItem);\r\n    }\r\n    render() {\r\n        // DISPLAY WHERE WE ARE\r\n        console.log(\"\\t\\t\\tToDoItem render\");\r\n        let listItem = this.props.toDoListItem;\r\n        let statusType = \"status-complete\";\r\n        if (listItem.status === \"incomplete\")\r\n            statusType = \"status-incomplete\";\r\n        if(this.props.index == 0){\r\n            return (\r\n                <div id={'todo-list-item-' + listItem.id} className='list-item-card'>\r\n                    <TaskForm changeTaskCallBack={this.props.changeTaskCallBack} itemChanged={this.props.toDoListItem} task={listItem.description}></TaskForm>\r\n                    <DateForm changeDateCallBack={this.props.changeDateCallBack} itemChanged={this.props.toDoListItem} date={listItem.due_date}></DateForm>\r\n                    <StatusForm changeStatusCallBack={this.props.changeStatusCallBack} itemChanged={this.props.toDoListItem} status={listItem.status}></StatusForm>\r\n                    <div className='item-col test-4-col'></div>\r\n                    <div className='item-col list-controls-col'>\r\n                        <KeyboardArrowDown className='list-item-control todo-button' onClick={this.moveThisItemDown}/>\r\n                        <Close className='list-item-control todo-button' onClick={this.closeItem}/>\r\n                        <div className='list-item-control'></div>\r\n            <div className='list-item-control'></div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        else if(this.props.index==this.props.listLength-1){\r\n            return (\r\n                <div id={'todo-list-item-' + listItem.id} className='list-item-card'>\r\n                    <TaskForm changeTaskCallBack={this.props.changeTaskCallBack} itemChanged={this.props.toDoListItem} task={listItem.description}></TaskForm>\r\n                    <DateForm changeDateCallBack={this.props.changeDateCallBack} itemChanged={this.props.toDoListItem} date={listItem.due_date}></DateForm>\r\n                    <StatusForm changeStatusCallBack={this.props.changeStatusCallBack} itemChanged={this.props.toDoListItem} status={listItem.status}></StatusForm>\r\n                    <div className='item-col test-4-col'></div>\r\n                    <div className='item-col list-controls-col'>\r\n                        <KeyboardArrowUp className='list-item-control todo-button' onClick={this.moveThisItemUp}/>\r\n                        <Close className='list-item-control todo-button' onClick={this.closeItem}/>\r\n                        <div className='list-item-control'></div>\r\n            <div className='list-item-control'></div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        else{\r\n            return (\r\n                <div id={'todo-list-item-' + listItem.id} className='list-item-card'>\r\n                    <TaskForm changeTaskCallBack={this.props.changeTaskCallBack} itemChanged={this.props.toDoListItem} task={listItem.description}></TaskForm>\r\n                    <DateForm changeDateCallBack={this.props.changeDateCallBack} itemChanged={this.props.toDoListItem} date={listItem.due_date}></DateForm>\r\n                    <StatusForm changeStatusCallBack={this.props.changeStatusCallBack} itemChanged={this.props.toDoListItem} status={listItem.status}></StatusForm>\r\n                    <div className='item-col test-4-col'></div>\r\n                    <div className='item-col list-controls-col'>\r\n                        <KeyboardArrowUp className='list-item-control todo-button' onClick={this.moveThisItemUp}/>\r\n                        <KeyboardArrowDown className='list-item-control todo-button' onClick={this.moveThisItemDown}/>\r\n                        <Close className='list-item-control todo-button' onClick={this.closeItem}/>\r\n                        <div className='list-item-control'></div>\r\n            <div className='list-item-control'></div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default ToDoItem;","C:\\hw2\\src\\components\\ListLink.js",["116"],"// IMPORT ALL THE THINGS NEEDED FROM OTHER JAVASCRIPT SOURCE FILES\r\nimport React, { Component } from 'react'\r\nimport ListTitle from './ListTitle'\r\n\r\nclass ListLink extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        // DISPLAY WHERE WE ARE\r\n        console.log(\"\\t\\t\\tListLink \" + this.props.toDoList.key + \" constructor\");\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        // DISPLAY WHERE WE ARE\r\n        console.log(\"\\t\\t\\tListLink \" + this.props.toDoList.key + \" did mount\");\r\n    }\r\n\r\n    handleLoadList = () => {\r\n        this.props.loadToDoListCallback(this.props.toDoList);\r\n    }\r\n\r\n    render() {\r\n        // DISPLAY WHERE WE ARE\r\n        if(this.props.selectedList.name == this.props.toDoList.name){\r\n            return (\r\n                <ListTitle \r\n                    className='todo-list-title'\r\n                    title={this.props.toDoList.name}\r\n                    changeTitle={this.props.changeListTitleCallBack}\r\n                >\r\n                    {this.props.toDoList.name}<br />\r\n                </ListTitle>\r\n            )\r\n        }\r\n        else{\r\n            return (\r\n                <div \r\n                    className='todo-list-button'\r\n                    onClick={this.handleLoadList}\r\n                >\r\n                    {this.props.toDoList.name}<br />\r\n                </div>\r\n            )\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default ListLink;","C:\\hw2\\src\\AddNewItem_Transaction.js",["117"],"'use strict'\r\n\r\n// IMPORT ALL THE THINGS NEEDED FROM OTHER JAVASCRIPT SOURCE FILES\r\nimport { jsTPS_Transaction } from \"./common/jsTPS.js\"\r\n\r\n// THIS TRANSACTION IS FOR ADDING A NEW ITEM TO A TODO LIST\r\nexport default class AddNewItem_Transaction extends jsTPS_Transaction {\r\n    constructor(initApp) {\r\n        super();\r\n        this.app = initApp;\r\n    }\r\n\r\n    doTransaction() {\r\n        this.itemAdded = this.app.addNewItem();\r\n    }\r\n\r\n    undoTransaction() {\r\n        let thisList = this.app.state.currentList;\r\n        let ind = thisList.items.indexOf(this.itemAdded);\r\n        thisList.items.splice(ind,1);\r\n        this.app.setState({\r\n        toDoLists: this.app.state.toDoLists,\r\n        currentList: thisList,\r\n        nextListId: this.app.state.nextListId\r\n        },this.afterToDoListsChangeComplete);\r\n    }\r\n}","C:\\hw2\\src\\MoveUp_Transaction.js",["118"],"'use strict'\r\n\r\n// IMPORT ALL THE THINGS NEEDED FROM OTHER JAVASCRIPT SOURCE FILES\r\nimport { jsTPS_Transaction } from \"./common/jsTPS.js\"\r\n\r\n// THIS TRANSACTION IS FOR ADDING A NEW ITEM TO A TODO LIST\r\nexport default class DeleteList_Transaction extends jsTPS_Transaction {\r\n    constructor(initApp,thisItem) {\r\n        super();\r\n        this.app = initApp;\r\n        this.item = thisItem;\r\n    }\r\n\r\n    doTransaction() {\r\n        // MAKE A NEW ITEM\r\n        this.app.moveUp(this.item);\r\n    }\r\n\r\n    undoTransaction() {\r\n        this.app.moveDown(this.item);\r\n    }\r\n}","C:\\hw2\\src\\MoveDown_Transaction.js",["119"],"'use strict'\r\n\r\n// IMPORT ALL THE THINGS NEEDED FROM OTHER JAVASCRIPT SOURCE FILES\r\nimport { jsTPS_Transaction } from \"./common/jsTPS.js\"\r\n\r\n// THIS TRANSACTION IS FOR ADDING A NEW ITEM TO A TODO LIST\r\nexport default class DeleteList_Transaction extends jsTPS_Transaction {\r\n    constructor(initApp,thisItem) {\r\n        super();\r\n        this.app = initApp;\r\n        this.item = thisItem;\r\n    }\r\n\r\n    doTransaction() {\r\n        // MAKE A NEW ITEM\r\n        this.app.moveDown(this.item);\r\n    }\r\n\r\n    undoTransaction() {\r\n        this.app.moveUp(this.item);\r\n    }\r\n}","C:\\hw2\\src\\CloseItem_Transaction.js",["120"],"'use strict'\r\n\r\n// IMPORT ALL THE THINGS NEEDED FROM OTHER JAVASCRIPT SOURCE FILES\r\nimport { jsTPS_Transaction } from \"./common/jsTPS.js\"\r\n\r\n// THIS TRANSACTION IS FOR ADDING A NEW ITEM TO A TODO LIST\r\nexport default class CloseItem_Transaction extends jsTPS_Transaction {\r\n    constructor(initApp,thisItem) {\r\n        super();\r\n        this.app = initApp;\r\n        this.item = thisItem;\r\n    }\r\n\r\n    doTransaction() {\r\n        this.index = this.app.closeItem(this.item);\r\n    }\r\n\r\n    undoTransaction() {\r\n        let thisList = this.app.state.currentList;\r\n        thisList.items.splice(this.index,0,this.item);\r\n        this.app.setState({\r\n        toDoLists: this.app.state.toDoLists,\r\n        currentList: thisList,\r\n        nextListId: this.app.state.nextListId\r\n        },this.afterToDoListsChangeComplete);\r\n    }\r\n}","C:\\hw2\\src\\components\\TaskForm.js",["121"],"import React, { Component } from 'react'\r\n\r\nclass TaskForm extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.state = {value: this.props.task};\r\n    }\r\n  \r\n    handleChange(event) {\r\n      this.props.changeTaskCallBack(this.props.itemChanged,event.target.value,this.state.value);\r\n      this.setState({value: event.target.value});\r\n    }\r\n\r\n\r\n    render() {\r\n      return (\r\n            <input className=\"task-input\" type=\"text\" value={this.props.task} onChange={this.handleChange} />\r\n      );\r\n    }\r\n  }\r\n  export default TaskForm;","C:\\hw2\\src\\ChangeTask_Transaction.js",["122"],"'use strict'\r\n\r\n// IMPORT ALL THE THINGS NEEDED FROM OTHER JAVASCRIPT SOURCE FILES\r\nimport { jsTPS_Transaction } from \"./common/jsTPS.js\"\r\n\r\n// THIS TRANSACTION IS FOR ADDING A NEW ITEM TO A TODO LIST\r\nexport default class ChangeTask_Transaction extends jsTPS_Transaction {\r\n    constructor(initApp,thisItem,thisNewTask,thisOldTask) {\r\n        super();\r\n        this.app = initApp;\r\n        this.item = thisItem;\r\n        this.newTask = thisNewTask;\r\n        this.oldTask = thisOldTask;\r\n    }\r\n\r\n    doTransaction() {\r\n        let thisList = this.app.state.currentList;\r\n        let index = thisList.items.indexOf(this.item);\r\n        thisList.items[index].description = this.newTask;\r\n        console.log(thisList.items[index].description);\r\n        this.app.setState({\r\n            toDoLists: this.app.state.toDoLists,\r\n            currentList: thisList,\r\n            nextListId: this.app.state.nextListId\r\n            },this.afterToDoListsChangeComplete);\r\n    }\r\n\r\n    undoTransaction() {\r\n        let thisList = this.app.state.currentList;\r\n        let index = thisList.items.indexOf(this.item);\r\n        thisList.items[index].description = this.oldTask;\r\n        console.log(thisList.items[index].description);\r\n        this.app.setState({\r\n            toDoLists: this.app.state.toDoLists,\r\n            currentList: thisList,\r\n            nextListId: this.app.state.nextListId\r\n            },this.afterToDoListsChangeComplete);\r\n    }\r\n}","C:\\hw2\\src\\ChangeDate_Transaction.js",["123"],"'use strict'\r\n\r\n// IMPORT ALL THE THINGS NEEDED FROM OTHER JAVASCRIPT SOURCE FILES\r\nimport { jsTPS_Transaction } from \"./common/jsTPS.js\"\r\n\r\n// THIS TRANSACTION IS FOR ADDING A NEW ITEM TO A TODO LIST\r\nexport default class ChangeDate_Transaction extends jsTPS_Transaction {\r\n    constructor(initApp,thisItem,thisNewDate,thisOldDate) {\r\n        super();\r\n        this.app = initApp;\r\n        this.item = thisItem;\r\n        this.newDate = thisNewDate;\r\n        this.oldDate = thisOldDate;\r\n    }\r\n\r\n    doTransaction() {\r\n        let thisList = this.app.state.currentList;\r\n        let index = thisList.items.indexOf(this.item);\r\n        thisList.items[index].due_date = this.newDate;\r\n        console.log(thisList.items[index].due_date);\r\n        this.app.setState({\r\n            toDoLists: this.app.state.toDoLists,\r\n            currentList: thisList,\r\n            nextListId: this.app.state.nextListId\r\n            },this.afterToDoListsChangeComplete);\r\n    }\r\n\r\n    undoTransaction() {\r\n        let thisList = this.app.state.currentList;\r\n        let index = thisList.items.indexOf(this.item);\r\n        thisList.items[index].due_date = this.oldDate;\r\n        console.log(thisList.items[index].due_date);\r\n        this.app.setState({\r\n            toDoLists: this.app.state.toDoLists,\r\n            currentList: thisList,\r\n            nextListId: this.app.state.nextListId\r\n            },this.afterToDoListsChangeComplete);\r\n    }\r\n}","C:\\hw2\\src\\components\\DateForm.js",["124"],"import React, { Component } from 'react'\r\n\r\nclass DateForm extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.state = {value: this.props.date};\r\n    }\r\n  \r\n    handleChange(event) {\r\n        console.log(this.state.value);\r\n      this.props.changeDateCallBack(this.props.itemChanged,event.target.value,this.state.value);\r\n      this.setState({value: event.target.value});\r\n    }\r\n\r\n\r\n    render() {\r\n      return (\r\n            <input className=\"date-input\" type=\"date\" value={this.props.date} onChange={this.handleChange} />\r\n      );\r\n    }\r\n  }\r\n  export default DateForm;","C:\\hw2\\src\\ChangeStatus_Transaction.js",["125"],"'use strict'\r\n\r\n// IMPORT ALL THE THINGS NEEDED FROM OTHER JAVASCRIPT SOURCE FILES\r\nimport { jsTPS_Transaction } from \"./common/jsTPS.js\"\r\n\r\n// THIS TRANSACTION IS FOR ADDING A NEW ITEM TO A TODO LIST\r\nexport default class ChangeStatus_Transaction extends jsTPS_Transaction {\r\n    constructor(initApp,thisItem,thisNewStatus,thisOldStatus) {\r\n        super();\r\n        this.app = initApp;\r\n        this.item = thisItem;\r\n        this.newStatus = thisNewStatus;\r\n        this.oldStatus = thisOldStatus;\r\n    }\r\n\r\n    doTransaction() {\r\n        let thisList = this.app.state.currentList;\r\n        let index = thisList.items.indexOf(this.item);\r\n        thisList.items[index].status = this.newStatus;\r\n        console.log(thisList.items[index].status);\r\n        this.app.setState({\r\n            toDoLists: this.app.state.toDoLists,\r\n            currentList: thisList,\r\n            nextListId: this.app.state.nextListId\r\n            },this.afterToDoListsChangeComplete);\r\n    }\r\n\r\n    undoTransaction() {\r\n        let thisList = this.app.state.currentList;\r\n        let index = thisList.items.indexOf(this.item);\r\n        thisList.items[index].status = this.oldStatus;\r\n        console.log(thisList.items[index].status);\r\n        this.app.setState({\r\n            toDoLists: this.app.state.toDoLists,\r\n            currentList: thisList,\r\n            nextListId: this.app.state.nextListId\r\n            },this.afterToDoListsChangeComplete);\r\n    }\r\n}","C:\\hw2\\src\\components\\StatusForm.js",["126","127"],"import React, { Component } from 'react'\r\n\r\nclass StatusForm extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.state = {value: this.props.status};\r\n    }\r\n  \r\n    handleChange(event) {\r\n      this.props.changeStatusCallBack(this.props.itemChanged,event.target.value,this.state.value);\r\n      this.setState({value: event.target.value});\r\n    }\r\n\r\n\r\n    render() {\r\n        if(this.props.status==\"complete\"){\r\n            return (\r\n                <select className=\"status-complete\" value={this.props.status} onChange={this.handleChange}>\r\n                    <option value=\"complete\">Complete</option>\r\n                    <option value=\"incomplete\">Incomplete</option>\r\n                </select>\r\n          );\r\n        }\r\n        else{\r\n            return (\r\n                <select className=\"status-incomplete\" value={this.props.status} onChange={this.handleChange}>\r\n                    <option value=\"complete\">Complete</option>\r\n                    <option value=\"incomplete\">Incomplete</option>\r\n                </select>\r\n          );\r\n        }\r\n      \r\n    }\r\n  }\r\n  export default StatusForm;","C:\\hw2\\src\\components\\ListTitle.js",["128"],"import React, { Component } from 'react'\r\n\r\nclass ListTitle extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.state = {value: this.props.title};\r\n    }\r\n  \r\n    handleChange(event) {\r\n      this.props.changeTitle(event.target.value);\r\n      this.setState({value: event.target.value});\r\n    }\r\n\r\n\r\n    render() {\r\n      return (\r\n            <input className=\"todo-list-title\" type=\"text\" value={this.props.title} onChange={this.handleChange} />\r\n      );\r\n    }\r\n  }\r\n  export default ListTitle;",{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"134","line":19,"column":1,"nodeType":"135","messageId":"136","endLine":22,"endColumn":4},{"ruleId":"137","severity":1,"message":"138","line":134,"column":11,"nodeType":"139","messageId":"140","endLine":134,"endColumn":13},{"ruleId":"141","severity":1,"message":"142","line":138,"column":7,"nodeType":"143","messageId":"140","endLine":138,"endColumn":16},{"ruleId":"144","severity":1,"message":"145","line":146,"column":9,"nodeType":"146","messageId":"147","endLine":146,"endColumn":17},{"ruleId":"148","severity":1,"message":"149","line":5,"column":5,"nodeType":"150","messageId":"151","endLine":7,"endColumn":6},{"ruleId":"148","severity":1,"message":"149","line":12,"column":5,"nodeType":"150","messageId":"151","endLine":14,"endColumn":6},{"ruleId":"137","severity":1,"message":"138","line":24,"column":41,"nodeType":"139","messageId":"140","endLine":24,"endColumn":43},{"ruleId":"148","severity":1,"message":"149","line":7,"column":5,"nodeType":"150","messageId":"151","endLine":9,"endColumn":6},{"ruleId":"152","severity":1,"message":"153","line":1,"column":1,"nodeType":"154","messageId":"155","endLine":1,"endColumn":13,"fix":"156"},{"ruleId":"157","severity":1,"message":"158","line":194,"column":29,"nodeType":"159","messageId":"160","endLine":194,"endColumn":40},{"ruleId":"144","severity":1,"message":"161","line":37,"column":13,"nodeType":"146","messageId":"147","endLine":37,"endColumn":23},{"ruleId":"137","severity":1,"message":"162","line":38,"column":29,"nodeType":"139","messageId":"140","endLine":38,"endColumn":31},{"ruleId":"137","severity":1,"message":"162","line":54,"column":33,"nodeType":"139","messageId":"140","endLine":54,"endColumn":35},{"ruleId":"137","severity":1,"message":"162","line":24,"column":41,"nodeType":"139","messageId":"140","endLine":24,"endColumn":43},{"ruleId":"152","severity":1,"message":"153","line":1,"column":1,"nodeType":"154","messageId":"155","endLine":1,"endColumn":13,"fix":"163"},{"ruleId":"152","severity":1,"message":"153","line":1,"column":1,"nodeType":"154","messageId":"155","endLine":1,"endColumn":13,"fix":"164"},{"ruleId":"152","severity":1,"message":"153","line":1,"column":1,"nodeType":"154","messageId":"155","endLine":1,"endColumn":13,"fix":"165"},{"ruleId":"152","severity":1,"message":"153","line":1,"column":1,"nodeType":"154","messageId":"155","endLine":1,"endColumn":13,"fix":"166"},{"ruleId":"144","severity":1,"message":"167","line":1,"column":17,"nodeType":"146","messageId":"147","endLine":1,"endColumn":26},{"ruleId":"152","severity":1,"message":"153","line":1,"column":1,"nodeType":"154","messageId":"155","endLine":1,"endColumn":13,"fix":"168"},{"ruleId":"152","severity":1,"message":"153","line":1,"column":1,"nodeType":"154","messageId":"155","endLine":1,"endColumn":13,"fix":"169"},{"ruleId":"144","severity":1,"message":"167","line":1,"column":17,"nodeType":"146","messageId":"147","endLine":1,"endColumn":26},{"ruleId":"152","severity":1,"message":"153","line":1,"column":1,"nodeType":"154","messageId":"155","endLine":1,"endColumn":13,"fix":"170"},{"ruleId":"144","severity":1,"message":"167","line":1,"column":17,"nodeType":"146","messageId":"147","endLine":1,"endColumn":26},{"ruleId":"137","severity":1,"message":"162","line":17,"column":29,"nodeType":"139","messageId":"140","endLine":17,"endColumn":31},{"ruleId":"144","severity":1,"message":"167","line":1,"column":17,"nodeType":"146","messageId":"147","endLine":1,"endColumn":26},"no-native-reassign",["171"],"no-negated-in-lhs",["172"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-dupe-keys","Duplicate key 'toDoLists'.","ObjectExpression","no-unused-vars","'thisList' is assigned a value but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"173","text":"174"},"no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","'statusType' is assigned a value but never used.","Expected '===' and instead saw '=='.",{"range":"175","text":"174"},{"range":"176","text":"174"},{"range":"177","text":"174"},{"range":"178","text":"174"},"'Component' is defined but never used.",{"range":"179","text":"174"},{"range":"180","text":"174"},{"range":"181","text":"174"},"no-global-assign","no-unsafe-negation",[0,12],"",[0,12],[0,12],[0,12],[0,12],[0,12],[0,12],[0,12]]