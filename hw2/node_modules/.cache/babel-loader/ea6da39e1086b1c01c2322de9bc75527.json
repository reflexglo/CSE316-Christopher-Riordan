{"ast":null,"code":"var _jsxFileName = \"C:\\\\hw2\\\\src\\\\App.js\";\n// IMPORT ALL THE THINGS NEEDED FROM OTHER JAVASCRIPT SOURCE FILES\nimport React, { Component } from 'react';\nimport testData from './test/testData.json';\nimport jsTPS from './common/jsTPS';\nimport ChangeStateTransaction from './Transactions/ChangeStateTransaction'; // THESE ARE OUR REACT COMPONENTS\n\nimport Navbar from './components/Navbar';\nimport LeftSidebar from './components/LeftSidebar';\nimport Workspace from './components/Workspace';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n{\n  /*import ItemsListHeaderComponent from './components/ItemsListHeaderComponent'\r\n  import ItemsListComponent from './components/ItemsListComponent'\r\n  import ListsComponent from './components/ListsComponent'\r\n  */\n}\n\nclass App extends Component {\n  constructor(props) {\n    // ALWAYS DO THIS FIRST\n    super(props); // DISPLAY WHERE WE ARE\n\n    this.loadToDoList = toDoList => {\n      console.log(\"loading \" + toDoList); // MAKE SURE toDoList IS AT THE TOP OF THE STACK BY REMOVING THEN PREPENDING\n\n      const nextLists = this.state.toDoLists.filter(testList => testList.id !== toDoList.id);\n      nextLists.unshift(toDoList);\n      this.setState({\n        toDoLists: nextLists,\n        currentList: toDoList\n      });\n    };\n\n    this.addNewList = () => {\n      let newToDoListInList = [this.makeNewToDoList()];\n      let newToDoListsList = [...newToDoListInList, ...this.state.toDoLists];\n      let newToDoList = newToDoListInList[0]; // AND SET THE STATE, WHICH SHOULD FORCE A render\n\n      this.setState({\n        toDoLists: newToDoListsList,\n        currentList: newToDoList,\n        nextListId: this.state.nextListId + 1\n      }, this.afterToDoListsChangeComplete);\n    };\n\n    this.addNewItem = () => {\n      let oldState = this.state;\n      let thisList = this.state.currentList;\n\n      if (thisList != null) {\n        thisList.items[thisList.items.length] = this.makeNewToDoListItem();\n        this.setState({\n          toDoLists: this.state.toDoLists,\n          currentList: thisList,\n          nextListItemId: this.state.nextListItemId + 1\n        }, this.afterToDoListsChangeComplete);\n        let newState = this.state;\n        let stateTransaction = new ChangeStateTransaction(this, oldState, newState);\n        this.tps.addTransaction(stateTransaction);\n      }\n    };\n\n    this.deleteList = () => {\n      let thisList = this.state.currentList;\n\n      if (thisList != null) {\n        let allLists = this.state.toDoLists;\n        let ind = allLists.indexOf(thisList);\n        allLists.splice(ind, 1);\n\n        if (ind != -1) {\n          this.setState({\n            toDoLists: this.state.toDoLists,\n            currentList: {\n              items: []\n            },\n            toDoLists: allLists,\n            nextListId: this.state.nextListId\n          }, this.afterToDoListsChangeComplete);\n        }\n      }\n    };\n\n    this.closeList = () => {\n      this.setState({\n        toDoLists: this.state.toDoLists,\n        currentList: {\n          items: []\n        },\n        nextListId: this.state.nextListId\n      }, this.afterToDoListsChangeComplete);\n    };\n\n    this.moveUp = item => {\n      let thisList = this.state.currentList;\n      let ind = thisList.items.indexOf(item);\n\n      if (ind - 1 >= 0) {\n        let temp = thisList.items[ind - 1];\n        thisList.items[ind - 1] = item;\n        thisList.items[ind] = temp;\n        this.setState({\n          toDoLists: this.state.toDoLists,\n          currentList: thisList,\n          nextListId: this.state.nextListId\n        }, this.afterToDoListsChangeComplete);\n      }\n    };\n\n    this.moveDown = item => {\n      let thisList = this.state.currentList;\n      let ind = thisList.items.indexOf(item);\n\n      if (ind + 1 < thisList.items.length) {\n        let temp = thisList.items[ind + 1];\n        thisList.items[ind + 1] = item;\n        thisList.items[ind] = temp;\n        this.setState({\n          toDoLists: this.state.toDoLists,\n          currentList: thisList,\n          nextListId: this.state.nextListId\n        }, this.afterToDoListsChangeComplete);\n      }\n    };\n\n    this.closeItem = item => {\n      let thisList = this.state.currentList;\n      let ind = thisList.items.indexOf(item);\n      thisList.items.splice(ind, 1);\n      this.setState({\n        toDoLists: this.state.toDoLists,\n        currentList: thisList,\n        nextListId: this.state.nextListId\n      }, this.afterToDoListsChangeComplete);\n    };\n\n    this.makeNewToDoList = () => {\n      let newToDoList = {\n        id: this.highListId,\n        name: 'Untitled',\n        items: []\n      };\n      return newToDoList;\n    };\n\n    this.makeNewToDoListItem = () => {\n      let newToDoListItem = {\n        description: \"No Description\",\n        dueDate: \"none\",\n        status: \"incomplete\"\n      };\n      return newToDoListItem;\n    };\n\n    this.afterToDoListsChangeComplete = () => {\n      console.log(\"App updated currentToDoList: \" + this.state.currentList); // WILL THIS WORK? @todo\n\n      let toDoListsString = JSON.stringify(this.state.toDoLists);\n      localStorage.setItem(\"recent_work\", toDoListsString);\n    };\n\n    this.undo = () => {\n      if (this.tps.hasTransactionToUndo()) {\n        this.tps.undoTransaction();\n      }\n    };\n\n    this.redo = () => {\n      if (this.tps.hasTransactionToRedo()) {\n        this.tps.doTransaction();\n      }\n    };\n\n    console.log(\"App constructor\"); // MAKE OUR TRANSACTION PROCESSING SYSTEM\n\n    this.tps = new jsTPS(); // CHECK TO SEE IF THERE IS DATA IN LOCAL STORAGE FOR THIS APP\n\n    let recentLists = localStorage.getItem(\"recentLists\");\n    console.log(\"recentLists: \" + recentLists);\n\n    if (!recentLists) {\n      recentLists = JSON.stringify(testData.toDoLists);\n      localStorage.setItem(\"toDoLists\", recentLists);\n    }\n\n    recentLists = JSON.parse(recentLists); // FIND OUT WHAT THE HIGHEST ID NUMBERS ARE FOR LISTS\n\n    let highListId = -1;\n    let highListItemId = -1;\n\n    for (let i = 0; i < recentLists.length; i++) {\n      let toDoList = recentLists[i];\n\n      if (toDoList.id > highListId) {\n        highListId = toDoList.id;\n      }\n\n      for (let j = 0; j < toDoList.items.length; j++) {\n        let toDoListItem = toDoList.items[j];\n        if (toDoListItem.id > highListItemId) highListItemId = toDoListItem.id;\n      }\n    }\n\n    ; // SETUP OUR APP STATE\n\n    this.state = {\n      toDoLists: recentLists,\n      currentList: {\n        items: []\n      },\n      nextListId: highListId + 1,\n      nextListItemId: highListItemId + 1,\n      useVerboseFeedback: true\n    };\n  } // WILL LOAD THE SELECTED LIST\n\n\n  render() {\n    let items = this.state.currentList.items;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"root\",\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LeftSidebar, {\n        toDoLists: this.state.toDoLists,\n        loadToDoListCallback: this.loadToDoList,\n        addNewListCallback: this.addNewList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Workspace, {\n        toDoListItems: items,\n        addNewItemCallBack: this.addNewItem,\n        deleteListCallBack: this.deleteList,\n        closeListCallBack: this.closeList,\n        moveUpItemCallBack: this.moveUp,\n        moveDownItemCallBack: this.moveDown,\n        closeItemCallBack: this.closeItem,\n        undoCallBack: this.undo,\n        redoCallBack: this.redo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/hw2/src/App.js"],"names":["React","Component","testData","jsTPS","ChangeStateTransaction","Navbar","LeftSidebar","Workspace","App","constructor","props","loadToDoList","toDoList","console","log","nextLists","state","toDoLists","filter","testList","id","unshift","setState","currentList","addNewList","newToDoListInList","makeNewToDoList","newToDoListsList","newToDoList","nextListId","afterToDoListsChangeComplete","addNewItem","oldState","thisList","items","length","makeNewToDoListItem","nextListItemId","newState","stateTransaction","tps","addTransaction","deleteList","allLists","ind","indexOf","splice","closeList","moveUp","item","temp","moveDown","closeItem","highListId","name","newToDoListItem","description","dueDate","status","toDoListsString","JSON","stringify","localStorage","setItem","undo","hasTransactionToUndo","undoTransaction","redo","hasTransactionToRedo","doTransaction","recentLists","getItem","parse","highListItemId","i","j","toDoListItem","useVerboseFeedback","render"],"mappings":"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","sourcesContent":["// IMPORT ALL THE THINGS NEEDED FROM OTHER JAVASCRIPT SOURCE FILES\r\nimport React, { Component } from 'react';\r\nimport testData from './test/testData.json'\r\nimport jsTPS from './common/jsTPS'\r\nimport ChangeStateTransaction from './Transactions/ChangeStateTransaction'\r\n\r\n// THESE ARE OUR REACT COMPONENTS\r\nimport Navbar from './components/Navbar'\r\nimport LeftSidebar from './components/LeftSidebar'\r\nimport Workspace from './components/Workspace'\r\n{/*import ItemsListHeaderComponent from './components/ItemsListHeaderComponent'\r\nimport ItemsListComponent from './components/ItemsListComponent'\r\nimport ListsComponent from './components/ListsComponent'\r\n*/}\r\nclass App extends Component {\r\n  constructor(props) {\r\n    // ALWAYS DO THIS FIRST\r\n    super(props);\r\n\r\n    // DISPLAY WHERE WE ARE\r\n    console.log(\"App constructor\");\r\n\r\n    // MAKE OUR TRANSACTION PROCESSING SYSTEM\r\n    this.tps = new jsTPS();\r\n\r\n    // CHECK TO SEE IF THERE IS DATA IN LOCAL STORAGE FOR THIS APP\r\n    let recentLists = localStorage.getItem(\"recentLists\");\r\n    console.log(\"recentLists: \" + recentLists);\r\n    if (!recentLists) {\r\n      recentLists = JSON.stringify(testData.toDoLists);\r\n      localStorage.setItem(\"toDoLists\", recentLists);\r\n    }\r\n    recentLists = JSON.parse(recentLists);\r\n\r\n    // FIND OUT WHAT THE HIGHEST ID NUMBERS ARE FOR LISTS\r\n    let highListId = -1;\r\n    let highListItemId = -1;\r\n    for (let i = 0; i < recentLists.length; i++) {\r\n      let toDoList = recentLists[i];\r\n      if (toDoList.id > highListId) {\r\n        highListId = toDoList.id;\r\n      }\r\n      for (let j = 0; j < toDoList.items.length; j++) {\r\n        let toDoListItem = toDoList.items[j];\r\n        if (toDoListItem.id > highListItemId)\r\n        highListItemId = toDoListItem.id;\r\n      }\r\n    };\r\n\r\n    // SETUP OUR APP STATE\r\n    this.state = {\r\n      toDoLists: recentLists,\r\n      currentList: {items: []},\r\n      nextListId: highListId+1,\r\n      nextListItemId: highListItemId+1,\r\n      useVerboseFeedback: true\r\n    }\r\n  }\r\n\r\n  // WILL LOAD THE SELECTED LIST\r\n  loadToDoList = (toDoList) => {\r\n    console.log(\"loading \" + toDoList);\r\n\r\n    // MAKE SURE toDoList IS AT THE TOP OF THE STACK BY REMOVING THEN PREPENDING\r\n    const nextLists = this.state.toDoLists.filter(testList =>\r\n      testList.id !== toDoList.id\r\n    );\r\n    nextLists.unshift(toDoList);\r\n\r\n    this.setState({\r\n      toDoLists: nextLists,\r\n      currentList: toDoList\r\n    });\r\n  }\r\n\r\n  addNewList = () => {\r\n    let newToDoListInList = [this.makeNewToDoList()];\r\n    let newToDoListsList = [...newToDoListInList, ...this.state.toDoLists];\r\n    let newToDoList = newToDoListInList[0];\r\n\r\n    // AND SET THE STATE, WHICH SHOULD FORCE A render\r\n    this.setState({\r\n      toDoLists: newToDoListsList,\r\n      currentList: newToDoList,\r\n      nextListId: this.state.nextListId+1\r\n    }, this.afterToDoListsChangeComplete);\r\n  }\r\n  addNewItem = () => {\r\n    let oldState = this.state;\r\n\r\n    let thisList = this.state.currentList;\r\n    if(thisList!=null){\r\n    thisList.items[thisList.items.length] = this.makeNewToDoListItem();\r\n    this.setState({\r\n      toDoLists: this.state.toDoLists,\r\n      currentList: thisList,\r\n      nextListItemId: this.state.nextListItemId+1\r\n    },this.afterToDoListsChangeComplete);\r\n\r\n    let newState = this.state;\r\n    let stateTransaction = new ChangeStateTransaction(this,oldState,newState);\r\n    this.tps.addTransaction(stateTransaction);\r\n  }\r\n  }\r\n  deleteList = () => {\r\n    let thisList = this.state.currentList;\r\n    if(thisList!=null){\r\n    let allLists = this.state.toDoLists;\r\n    let ind = allLists.indexOf(thisList);\r\n    allLists.splice(ind,1);\r\n    if(ind!=-1){\r\n    this.setState({\r\n      toDoLists: this.state.toDoLists,\r\n      currentList: {items:[]},\r\n      toDoLists: allLists,\r\n      nextListId: this.state.nextListId\r\n    },this.afterToDoListsChangeComplete);\r\n  }\r\n  }\r\n  }\r\n  closeList = () => {\r\n    this.setState({\r\n      toDoLists: this.state.toDoLists,\r\n      currentList: {items:[]},\r\n      nextListId: this.state.nextListId\r\n    },this.afterToDoListsChangeComplete);\r\n  }\r\n  moveUp = (item) => {\r\n    let thisList = this.state.currentList;\r\n    let ind = thisList.items.indexOf(item);\r\n    if(ind-1>=0){\r\n    let temp = thisList.items[ind-1];\r\n    thisList.items[ind-1] = item;\r\n    thisList.items[ind] = temp;\r\n    this.setState({\r\n      toDoLists: this.state.toDoLists,\r\n      currentList: thisList,\r\n      nextListId: this.state.nextListId\r\n    },this.afterToDoListsChangeComplete);\r\n  }\r\n  }\r\n  moveDown = (item) => {\r\n    let thisList = this.state.currentList;\r\n    let ind = thisList.items.indexOf(item);\r\n    if(ind+1<thisList.items.length){\r\n    let temp = thisList.items[ind+1];\r\n    thisList.items[ind+1] = item;\r\n    thisList.items[ind] = temp;\r\n    this.setState({\r\n      toDoLists: this.state.toDoLists,\r\n      currentList: thisList,\r\n      nextListId: this.state.nextListId\r\n    },this.afterToDoListsChangeComplete);\r\n  }\r\n  }\r\n  closeItem = (item) => {\r\n    let thisList = this.state.currentList;\r\n    let ind = thisList.items.indexOf(item);\r\n    thisList.items.splice(ind,1);\r\n    this.setState({\r\n      toDoLists: this.state.toDoLists,\r\n      currentList: thisList,\r\n      nextListId: this.state.nextListId\r\n    },this.afterToDoListsChangeComplete);\r\n  }\r\n\r\n  makeNewToDoList = () => {\r\n    let newToDoList = {\r\n      id: this.highListId,\r\n      name: 'Untitled',\r\n      items: []\r\n    };\r\n    return newToDoList;\r\n  }\r\n\r\n  makeNewToDoListItem = () =>  {\r\n    let newToDoListItem = {\r\n      description: \"No Description\",\r\n      dueDate: \"none\",\r\n      status: \"incomplete\"\r\n    };\r\n    return newToDoListItem;\r\n  }\r\n\r\n  // THIS IS A CALLBACK FUNCTION FOR AFTER AN EDIT TO A LIST\r\n  afterToDoListsChangeComplete = () => {\r\n    console.log(\"App updated currentToDoList: \" + this.state.currentList);\r\n\r\n    // WILL THIS WORK? @todo\r\n    let toDoListsString = JSON.stringify(this.state.toDoLists);\r\n    localStorage.setItem(\"recent_work\", toDoListsString);\r\n  }\r\n\r\n  undo = () => {\r\n    if (this.tps.hasTransactionToUndo()) {\r\n      this.tps.undoTransaction();\r\n    }\r\n  }\r\n  redo = () => {\r\n    if (this.tps.hasTransactionToRedo()) {\r\n      this.tps.doTransaction();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let items = this.state.currentList.items;\r\n    return (\r\n      <div id=\"root\">\r\n        <Navbar />\r\n        <LeftSidebar \r\n          toDoLists={this.state.toDoLists}\r\n          loadToDoListCallback={this.loadToDoList}\r\n          addNewListCallback={this.addNewList}\r\n        />\r\n        <Workspace \r\n        toDoListItems={items}\r\n        addNewItemCallBack={this.addNewItem}\r\n        deleteListCallBack={this.deleteList}\r\n        closeListCallBack={this.closeList}\r\n        moveUpItemCallBack={this.moveUp}\r\n        moveDownItemCallBack={this.moveDown}\r\n        closeItemCallBack={this.closeItem}\r\n        undoCallBack={this.undo}\r\n        redoCallBack={this.redo}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}