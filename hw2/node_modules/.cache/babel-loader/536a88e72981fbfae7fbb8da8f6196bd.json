{"ast":null,"code":"var _jsxFileName = \"C:\\\\hw2\\\\src\\\\App.js\";\n// IMPORT ALL THE THINGS NEEDED FROM OTHER JAVASCRIPT SOURCE FILES\nimport React, { Component } from 'react';\nimport testData from './test/testData.json';\nimport jsTPS from './common/jsTPS';\nimport AddNewItem_Transaction from './AddNewItem_Transaction';\nimport MoveUp_Transaction from './MoveUp_Transaction';\nimport MoveDown_Transaction from './MoveDown_Transaction';\nimport CloseItem_Transaction from './CloseItem_Transaction';\nimport ChangeTask_Transaction from './ChangeTask_Transaction';\nimport ChangeDate_Transaction from './ChangeDate_Transaction';\nimport ChangeStatus_Transaction from './ChangeStatus_Transaction';\nimport { confirmAlert } from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css'; // THESE ARE OUR REACT COMPONENTS\n\nimport Navbar from './components/Navbar';\nimport LeftSidebar from './components/LeftSidebar';\nimport Workspace from './components/Workspace';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n{\n  /*import ItemsListHeaderComponent from './components/ItemsListHeaderComponent'\r\n  import ItemsListComponent from './components/ItemsListComponent'\r\n  import ListsComponent from './components/ListsComponent'\r\n  */\n}\n\nclass App extends Component {\n  constructor(props) {\n    // ALWAYS DO THIS FIRST\n    super(props); // DISPLAY WHERE WE ARE\n\n    this.loadToDoList = toDoList => {\n      console.log(\"loading \" + toDoList);\n      this.tps.clearAllTransactions(); // MAKE SURE toDoList IS AT THE TOP OF THE STACK BY REMOVING THEN PREPENDING\n\n      const nextLists = this.state.toDoLists.filter(testList => testList.id !== toDoList.id);\n      nextLists.unshift(toDoList);\n      this.setState({\n        toDoLists: nextLists,\n        currentList: toDoList\n      });\n    };\n\n    this.changeListTitle = title => {\n      let thisList = this.state.currentList;\n      thisList.name = title;\n      this.setState({\n        toDoLists: this.state.toDoLists,\n        currentList: thisList,\n        nextListItemId: this.state.nextListItemId + 1\n      }, this.afterToDoListsChangeComplete);\n    };\n\n    this.addNewList = () => {\n      let newToDoListInList = [this.makeNewToDoList()];\n      let newToDoListsList = [...newToDoListInList, ...this.state.toDoLists];\n      let newToDoList = newToDoListInList[0];\n      newToDoList.id = this.state.nextListId;\n      console.log(newToDoList.id); // AND SET THE STATE, WHICH SHOULD FORCE A render\n\n      this.setState({\n        toDoLists: newToDoListsList,\n        currentList: newToDoList,\n        nextListId: this.state.nextListId + 1\n      }, this.afterToDoListsChangeComplete);\n      this.forceUpdate();\n    };\n\n    this.addNewItemTransaction = () => {\n      let transaction = new AddNewItem_Transaction(this);\n      this.tps.addTransaction(transaction);\n    };\n\n    this.addNewItem = () => {\n      let thisList = this.state.currentList;\n      let newItem = this.makeNewToDoListItem();\n\n      if (thisList != null) {\n        thisList.items[thisList.items.length] = newItem;\n        this.setState({\n          toDoLists: this.state.toDoLists,\n          currentList: thisList,\n          nextListItemId: this.state.nextListItemId + 1\n        }, this.afterToDoListsChangeComplete);\n      }\n\n      return newItem;\n    };\n\n    this.deleteList = () => {\n      let thisList = this.state.currentList;\n\n      if (thisList != null) {\n        let allLists = this.state.toDoLists;\n        let ind = allLists.indexOf(thisList);\n        allLists.splice(ind, 1);\n\n        if (ind != -1) {\n          this.setState({\n            toDoLists: this.state.toDoLists,\n            currentList: {\n              items: []\n            },\n            toDoLists: allLists,\n            nextListId: this.state.nextListId\n          }, this.afterToDoListsChangeComplete);\n        }\n      }\n    };\n\n    this.closeList = () => {\n      let thisList = this.state.currentList;\n      this.setState({\n        toDoLists: this.state.toDoLists,\n        currentList: {\n          items: []\n        },\n        nextListId: this.state.nextListId\n      }, this.afterToDoListsChangeComplete);\n    };\n\n    this.moveUpTransaction = item => {\n      let transaction = new MoveUp_Transaction(this, item);\n      this.tps.addTransaction(transaction);\n    };\n\n    this.moveUp = item => {\n      let thisList = this.state.currentList;\n      let ind = thisList.items.indexOf(item);\n\n      if (ind - 1 >= 0) {\n        let temp = thisList.items[ind - 1];\n        thisList.items[ind - 1] = item;\n        thisList.items[ind] = temp;\n        this.setState({\n          toDoLists: this.state.toDoLists,\n          currentList: thisList,\n          nextListId: this.state.nextListId\n        }, this.afterToDoListsChangeComplete);\n      }\n    };\n\n    this.moveDownTransaction = item => {\n      let transaction = new MoveDown_Transaction(this, item);\n      this.tps.addTransaction(transaction);\n    };\n\n    this.moveDown = item => {\n      let thisList = this.state.currentList;\n      let ind = thisList.items.indexOf(item);\n\n      if (ind + 1 < thisList.items.length) {\n        let temp = thisList.items[ind + 1];\n        thisList.items[ind + 1] = item;\n        thisList.items[ind] = temp;\n        this.setState({\n          toDoLists: this.state.toDoLists,\n          currentList: thisList,\n          nextListId: this.state.nextListId\n        }, this.afterToDoListsChangeComplete);\n      }\n    };\n\n    this.closeItemTransaction = item => {\n      let transaction = new CloseItem_Transaction(this, item);\n      this.tps.addTransaction(transaction);\n    };\n\n    this.closeItem = item => {\n      let thisList = this.state.currentList;\n      let ind = thisList.items.indexOf(item);\n      thisList.items.splice(ind, 1);\n      this.setState({\n        toDoLists: this.state.toDoLists,\n        currentList: thisList,\n        nextListId: this.state.nextListId\n      }, this.afterToDoListsChangeComplete);\n      return ind;\n    };\n\n    this.changeTaskTransaction = (item, newTask, oldTask) => {\n      let transaction = new ChangeTask_Transaction(this, item, newTask, oldTask);\n      this.tps.addTransaction(transaction);\n    };\n\n    this.changeDateTransaction = (item, newDate, oldDate) => {\n      let transaction = new ChangeDate_Transaction(this, item, newDate, oldDate);\n      this.tps.addTransaction(transaction);\n    };\n\n    this.changeStatusTransaction = (item, newStatus, oldStatus) => {\n      let transaction = new ChangeStatus_Transaction(this, item, newStatus, oldStatus);\n      this.tps.addTransaction(transaction);\n    };\n\n    this.makeNewToDoList = () => {\n      let newToDoList = {\n        id: this.highListId,\n        name: 'Untitled',\n        items: []\n      };\n      return newToDoList;\n    };\n\n    this.makeNewToDoListItem = () => {\n      let newToDoListItem = {\n        description: \"No Description\",\n        dueDate: \"none\",\n        status: \"incomplete\"\n      };\n      return newToDoListItem;\n    };\n\n    this.afterToDoListsChangeComplete = () => {\n      console.log(\"App updated currentToDoList: \" + this.state.currentList); // WILL THIS WORK? @todo\n\n      let toDoListsString = JSON.stringify(this.state.toDoLists);\n      localStorage.setItem(\"recent_work\", toDoListsString);\n    };\n\n    this.undo = () => {\n      if (this.tps.hasTransactionToUndo()) {\n        this.tps.undoTransaction();\n      }\n    };\n\n    this.redo = () => {\n      if (this.tps.hasTransactionToRedo()) {\n        this.tps.doTransaction();\n      }\n    };\n\n    this.undoStatus = () => {\n      if (this.tps.hasTransactionToUndo()) {\n        return \"enabled\";\n      } else {\n        return \"disabled\";\n      }\n    };\n\n    this.redoStatus = () => {\n      if (this.tps.hasTransactionToRedo()) {\n        return \"enabled\";\n      } else {\n        return \"disabled\";\n      }\n    };\n\n    this.nothing = () => {};\n\n    this.confirmDelete = () => {\n      confirmAlert({\n        title: 'Confirm delete',\n        message: 'Are you sure want to delete this list?',\n        buttons: [{\n          label: 'Yes',\n          onClick: this.deleteList\n        }, {\n          label: 'Cancel',\n          onClick: this.nothing\n        }]\n      });\n    };\n\n    console.log(\"App constructor\"); // MAKE OUR TRANSACTION PROCESSING SYSTEM\n\n    this.tps = new jsTPS(); // CHECK TO SEE IF THERE IS DATA IN LOCAL STORAGE FOR THIS APP\n\n    let recentLists = localStorage.getItem(\"recentLists\");\n    console.log(\"recentLists: \" + recentLists);\n\n    if (!recentLists) {\n      recentLists = JSON.stringify(testData.toDoLists);\n      localStorage.setItem(\"toDoLists\", recentLists);\n    }\n\n    recentLists = JSON.parse(recentLists); // FIND OUT WHAT THE HIGHEST ID NUMBERS ARE FOR LISTS\n\n    let highListId = -1;\n    let highListItemId = -1;\n\n    for (let i = 0; i < recentLists.length; i++) {\n      let toDoList = recentLists[i];\n\n      if (toDoList.id > highListId) {\n        highListId = toDoList.id;\n      }\n\n      for (let j = 0; j < toDoList.items.length; j++) {\n        let toDoListItem = toDoList.items[j];\n        if (toDoListItem.id > highListItemId) highListItemId = toDoListItem.id;\n      }\n    }\n\n    ; // SETUP OUR APP STATE\n\n    this.state = {\n      toDoLists: recentLists,\n      currentList: {\n        items: []\n      },\n      nextListId: highListId + 1,\n      nextListItemId: highListItemId + 1,\n      useVerboseFeedback: true\n    };\n  } // WILL LOAD THE SELECTED LIST\n\n\n  render() {\n    let items = this.state.currentList.items;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"root\",\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LeftSidebar, {\n        toDoLists: this.state.toDoLists,\n        loadToDoListCallback: this.loadToDoList,\n        addNewListCallback: this.addNewList,\n        selectedList: this.state.currentList,\n        changeListTitleCallBack: this.changeListTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Workspace, {\n        toDoListItems: items,\n        currentToDoList: this.state.currentList,\n        undoStatus: this.undoStatus,\n        redoStatus: this.redoStatus,\n        addNewItemCallBack: this.addNewItemTransaction,\n        deleteListCallBack: this.confirmDelete,\n        closeListCallBack: this.closeList,\n        moveUpItemCallBack: this.moveUpTransaction,\n        moveDownItemCallBack: this.moveDownTransaction,\n        closeItemCallBack: this.closeItemTransaction,\n        changeTaskCallBack: this.changeTaskTransaction,\n        changeDateCallBack: this.changeDateTransaction,\n        changeStatusCallBack: this.changeStatusTransaction,\n        undoCallBack: this.undo,\n        redoCallBack: this.redo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/hw2/src/App.js"],"names":["React","Component","testData","jsTPS","AddNewItem_Transaction","MoveUp_Transaction","MoveDown_Transaction","CloseItem_Transaction","ChangeTask_Transaction","ChangeDate_Transaction","ChangeStatus_Transaction","confirmAlert","Navbar","LeftSidebar","Workspace","App","constructor","props","loadToDoList","toDoList","console","log","tps","clearAllTransactions","nextLists","state","toDoLists","filter","testList","id","unshift","setState","currentList","changeListTitle","title","thisList","name","nextListItemId","afterToDoListsChangeComplete","addNewList","newToDoListInList","makeNewToDoList","newToDoListsList","newToDoList","nextListId","forceUpdate","addNewItemTransaction","transaction","addTransaction","addNewItem","newItem","makeNewToDoListItem","items","length","deleteList","allLists","ind","indexOf","splice","closeList","moveUpTransaction","item","moveUp","temp","moveDownTransaction","moveDown","closeItemTransaction","closeItem","changeTaskTransaction","newTask","oldTask","changeDateTransaction","newDate","oldDate","changeStatusTransaction","newStatus","oldStatus","highListId","newToDoListItem","description","dueDate","status","toDoListsString","JSON","stringify","localStorage","setItem","undo","hasTransactionToUndo","undoTransaction","redo","hasTransactionToRedo","doTransaction","undoStatus","redoStatus","nothing","confirmDelete","message","buttons","label","onClick","recentLists","getItem","parse","highListItemId","i","j","toDoListItem","useVerboseFeedback","render"],"mappings":"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","sourcesContent":["// IMPORT ALL THE THINGS NEEDED FROM OTHER JAVASCRIPT SOURCE FILES\r\nimport React, { Component } from 'react';\r\nimport testData from './test/testData.json'\r\nimport jsTPS from './common/jsTPS'\r\nimport AddNewItem_Transaction from './AddNewItem_Transaction'\r\nimport MoveUp_Transaction from './MoveUp_Transaction'\r\nimport MoveDown_Transaction from './MoveDown_Transaction'\r\nimport CloseItem_Transaction from './CloseItem_Transaction'\r\nimport ChangeTask_Transaction from './ChangeTask_Transaction'\r\nimport ChangeDate_Transaction from './ChangeDate_Transaction'\r\nimport ChangeStatus_Transaction from './ChangeStatus_Transaction'\r\nimport { confirmAlert } from 'react-confirm-alert';\r\nimport 'react-confirm-alert/src/react-confirm-alert.css';\r\n\r\n// THESE ARE OUR REACT COMPONENTS\r\nimport Navbar from './components/Navbar'\r\nimport LeftSidebar from './components/LeftSidebar'\r\nimport Workspace from './components/Workspace'\r\n{/*import ItemsListHeaderComponent from './components/ItemsListHeaderComponent'\r\nimport ItemsListComponent from './components/ItemsListComponent'\r\nimport ListsComponent from './components/ListsComponent'\r\n*/}\r\nclass App extends Component {\r\n  constructor(props) {\r\n    // ALWAYS DO THIS FIRST\r\n    super(props);\r\n\r\n    // DISPLAY WHERE WE ARE\r\n    console.log(\"App constructor\");\r\n\r\n    // MAKE OUR TRANSACTION PROCESSING SYSTEM\r\n    this.tps = new jsTPS();\r\n\r\n    // CHECK TO SEE IF THERE IS DATA IN LOCAL STORAGE FOR THIS APP\r\n    let recentLists = localStorage.getItem(\"recentLists\");\r\n    console.log(\"recentLists: \" + recentLists);\r\n    if (!recentLists) {\r\n      recentLists = JSON.stringify(testData.toDoLists);\r\n      localStorage.setItem(\"toDoLists\", recentLists);\r\n    }\r\n    recentLists = JSON.parse(recentLists);\r\n\r\n    // FIND OUT WHAT THE HIGHEST ID NUMBERS ARE FOR LISTS\r\n    let highListId = -1;\r\n    let highListItemId = -1;\r\n    for (let i = 0; i < recentLists.length; i++) {\r\n      let toDoList = recentLists[i];\r\n      if (toDoList.id > highListId) {\r\n        highListId = toDoList.id;\r\n      }\r\n      for (let j = 0; j < toDoList.items.length; j++) {\r\n        let toDoListItem = toDoList.items[j];\r\n        if (toDoListItem.id > highListItemId)\r\n        highListItemId = toDoListItem.id;\r\n      }\r\n    };\r\n\r\n    // SETUP OUR APP STATE\r\n    this.state = {\r\n      toDoLists: recentLists,\r\n      currentList: {items: []},\r\n      nextListId: highListId+1,\r\n      nextListItemId: highListItemId+1,\r\n      useVerboseFeedback: true\r\n    }\r\n  }\r\n\r\n  // WILL LOAD THE SELECTED LIST\r\n  loadToDoList = (toDoList) => {\r\n    console.log(\"loading \" + toDoList);\r\n    this.tps.clearAllTransactions();\r\n    // MAKE SURE toDoList IS AT THE TOP OF THE STACK BY REMOVING THEN PREPENDING\r\n    const nextLists = this.state.toDoLists.filter(testList =>\r\n      testList.id !== toDoList.id\r\n    );\r\n    nextLists.unshift(toDoList);\r\n\r\n    this.setState({\r\n      toDoLists: nextLists,\r\n      currentList: toDoList\r\n    });\r\n  }\r\n\r\n\r\n  changeListTitle = (title) => {\r\n    let thisList = this.state.currentList;\r\n    thisList.name = title;\r\n    this.setState({\r\n      toDoLists: this.state.toDoLists,\r\n      currentList: thisList,\r\n      nextListItemId: this.state.nextListItemId+1\r\n    },this.afterToDoListsChangeComplete);\r\n  }\r\n\r\n  addNewList = () => {\r\n    let newToDoListInList = [this.makeNewToDoList()];\r\n    let newToDoListsList = [...newToDoListInList, ...this.state.toDoLists];\r\n    let newToDoList = newToDoListInList[0];\r\n    newToDoList.id = this.state.nextListId;\r\n    console.log(newToDoList.id);\r\n    // AND SET THE STATE, WHICH SHOULD FORCE A render\r\n    this.setState({\r\n      toDoLists: newToDoListsList,\r\n      currentList: newToDoList,\r\n      nextListId: this.state.nextListId+1\r\n    }, this.afterToDoListsChangeComplete);\r\n    this.forceUpdate();\r\n  }\r\n\r\n  addNewItemTransaction = () => {\r\n    let transaction = new AddNewItem_Transaction(this);\r\n    this.tps.addTransaction(transaction);\r\n  }\r\n\r\n  addNewItem = () => {\r\n    let thisList = this.state.currentList;\r\n    let newItem = this.makeNewToDoListItem();\r\n    if(thisList!=null){\r\n    thisList.items[thisList.items.length] = newItem;\r\n    this.setState({\r\n      toDoLists: this.state.toDoLists,\r\n      currentList: thisList,\r\n      nextListItemId: this.state.nextListItemId+1\r\n    },this.afterToDoListsChangeComplete);\r\n  }\r\n  return newItem;\r\n  }\r\n\r\n  deleteList = () => {\r\n    let thisList = this.state.currentList;\r\n    if(thisList!=null){\r\n    let allLists = this.state.toDoLists;\r\n    let ind = allLists.indexOf(thisList);\r\n    allLists.splice(ind,1);\r\n    if(ind!=-1){\r\n    this.setState({\r\n      toDoLists: this.state.toDoLists,\r\n      currentList: {items:[]},\r\n      toDoLists: allLists,\r\n      nextListId: this.state.nextListId\r\n    },this.afterToDoListsChangeComplete);\r\n  }\r\n  }\r\n  }\r\n\r\n  closeList = () => {\r\n    let thisList = this.state.currentList;\r\n    this.setState({\r\n      toDoLists: this.state.toDoLists,\r\n      currentList: {items:[]},\r\n      nextListId: this.state.nextListId\r\n    },this.afterToDoListsChangeComplete);\r\n  }\r\n\r\n  moveUpTransaction = (item) => {\r\n    let transaction = new MoveUp_Transaction(this,item);\r\n    this.tps.addTransaction(transaction);\r\n  }\r\n\r\n  moveUp = (item) => {\r\n    let thisList = this.state.currentList;\r\n    let ind = thisList.items.indexOf(item);\r\n    if(ind-1>=0){\r\n    let temp = thisList.items[ind-1];\r\n    thisList.items[ind-1] = item;\r\n    thisList.items[ind] = temp;\r\n    this.setState({\r\n      toDoLists: this.state.toDoLists,\r\n      currentList: thisList,\r\n      nextListId: this.state.nextListId\r\n    },this.afterToDoListsChangeComplete);\r\n  }\r\n  }\r\n\r\n  moveDownTransaction = (item) => {\r\n    let transaction = new MoveDown_Transaction(this,item);\r\n    this.tps.addTransaction(transaction);\r\n  }\r\n\r\n  moveDown = (item) => {\r\n    let thisList = this.state.currentList;\r\n    let ind = thisList.items.indexOf(item);\r\n    if(ind+1<thisList.items.length){\r\n    let temp = thisList.items[ind+1];\r\n    thisList.items[ind+1] = item;\r\n    thisList.items[ind] = temp;\r\n    this.setState({\r\n      toDoLists: this.state.toDoLists,\r\n      currentList: thisList,\r\n      nextListId: this.state.nextListId\r\n    },this.afterToDoListsChangeComplete);\r\n  }\r\n  }\r\n\r\n  closeItemTransaction = (item) => {\r\n    let transaction = new CloseItem_Transaction(this,item);\r\n    this.tps.addTransaction(transaction);\r\n  }\r\n\r\n  closeItem = (item) => {\r\n    let thisList = this.state.currentList;\r\n    let ind = thisList.items.indexOf(item);\r\n    thisList.items.splice(ind,1);\r\n    this.setState({\r\n      toDoLists: this.state.toDoLists,\r\n      currentList: thisList,\r\n      nextListId: this.state.nextListId\r\n    },this.afterToDoListsChangeComplete);\r\n    return ind;\r\n  }\r\n\r\n  changeTaskTransaction = (item,newTask,oldTask) => {\r\n    let transaction = new ChangeTask_Transaction(this,item,newTask,oldTask);\r\n    this.tps.addTransaction(transaction);\r\n  }\r\n\r\n  changeDateTransaction = (item,newDate,oldDate) => {\r\n    let transaction = new ChangeDate_Transaction(this,item,newDate,oldDate);\r\n    this.tps.addTransaction(transaction);\r\n  }\r\n\r\n  changeStatusTransaction = (item,newStatus,oldStatus) => {\r\n    let transaction = new ChangeStatus_Transaction(this,item,newStatus,oldStatus);\r\n    this.tps.addTransaction(transaction);\r\n  }\r\n\r\n  makeNewToDoList = () => {\r\n    let newToDoList = {\r\n      id: this.highListId,\r\n      name: 'Untitled',\r\n      items: []\r\n    };\r\n    return newToDoList;\r\n  }\r\n\r\n  makeNewToDoListItem = () =>  {\r\n    let newToDoListItem = {\r\n      description: \"No Description\",\r\n      dueDate: \"none\",\r\n      status: \"incomplete\"\r\n    };\r\n    return newToDoListItem;\r\n  }\r\n\r\n  // THIS IS A CALLBACK FUNCTION FOR AFTER AN EDIT TO A LIST\r\n  afterToDoListsChangeComplete = () => {\r\n    console.log(\"App updated currentToDoList: \" + this.state.currentList);\r\n\r\n    // WILL THIS WORK? @todo\r\n    let toDoListsString = JSON.stringify(this.state.toDoLists);\r\n    localStorage.setItem(\"recent_work\", toDoListsString);\r\n  }\r\n\r\n  undo = () => {\r\n    if (this.tps.hasTransactionToUndo()) {\r\n      this.tps.undoTransaction();\r\n    }\r\n  }\r\n  redo = () => {\r\n    if (this.tps.hasTransactionToRedo()) {\r\n      this.tps.doTransaction();\r\n    }\r\n  }\r\n\r\n  undoStatus = () => {\r\n    if (this.tps.hasTransactionToUndo()) {\r\n      return \"enabled\";\r\n    }\r\n    else{\r\n      return \"disabled\";\r\n    }\r\n  }\r\n  redoStatus = () => {\r\n    if (this.tps.hasTransactionToRedo()) {\r\n      return \"enabled\";\r\n    }\r\n    else{\r\n      return \"disabled\";\r\n    }\r\n  }\r\n\r\n  nothing = () => {\r\n\r\n  }\r\n\r\n  confirmDelete = () => {\r\n    confirmAlert({\r\n      title: 'Confirm delete',\r\n      message: 'Are you sure want to delete this list?',\r\n      buttons: [\r\n        {\r\n          label: 'Yes',\r\n          onClick: this.deleteList\r\n        },\r\n        {\r\n          label: 'Cancel',\r\n          onClick: this.nothing\r\n        }\r\n      ]\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let items = this.state.currentList.items;\r\n    return (\r\n      <div id=\"root\">\r\n        <Navbar />\r\n        <LeftSidebar \r\n          toDoLists={this.state.toDoLists}\r\n          loadToDoListCallback={this.loadToDoList}\r\n          addNewListCallback={this.addNewList}\r\n          selectedList={this.state.currentList}\r\n          changeListTitleCallBack={this.changeListTitle}\r\n        />\r\n        <Workspace \r\n        toDoListItems={items}\r\n        currentToDoList={this.state.currentList}\r\n        undoStatus={this.undoStatus}\r\n        redoStatus={this.redoStatus}\r\n        addNewItemCallBack={this.addNewItemTransaction}\r\n        deleteListCallBack={this.confirmDelete}\r\n        closeListCallBack={this.closeList}\r\n        moveUpItemCallBack={this.moveUpTransaction}\r\n        moveDownItemCallBack={this.moveDownTransaction}\r\n        closeItemCallBack={this.closeItemTransaction}\r\n        changeTaskCallBack={this.changeTaskTransaction}\r\n        changeDateCallBack={this.changeDateTransaction}\r\n        changeStatusCallBack={this.changeStatusTransaction}\r\n        undoCallBack={this.undo}\r\n        redoCallBack={this.redo}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}